/*
 * jQuery Validation Plugin v1.15.0
 *
 * http://jqueryvalidation.org/
 *
 * Copyright (c) 2016 J\u00f6rn Zaefferer
 * Released under the MIT license
 */
(function(a) {
	if (typeof define === "function" && define.amd) {
		define([ "jquery", "./jquery.validate" ], a)
	} else {
		if (typeof module === "object" && module.exports) {
			module.exports = a(require("jquery"))
		} else {
			a(jQuery)
		}
	}
}
		(function(b) {
			b
					.extend(
							b.validator.messages,
							{
								pattern : "Invalid format.",
								maxWords : b.validator
										.format("Please enter {0} words or less."),
								minWords : b.validator
										.format("Please enter at least {0} words."),
								rangeWords : b.validator
										.format("Please enter between {0} and {1} words."),
								accept : b.validator
										.format("Please enter a value with a valid mimetype."),
								alphanumeric : "Letters, numbers, and underscores only please.",
								bankaccountNL : "Please specify a valid bank account number.",
								bankorgiroaccountNL : "Please specify a valid bank or giro account number.",
								bic : "Please specify a valid BIC code.",
								extension : b.validator
										.format("Please enter a value with a valid extension."),
								integer : "A positive or negative non-decimal number please.",
								ipv4 : "Please enter a valid IP v4 address.",
								ipv6 : "Please enter a valid IP v6 address.",
								safePassword: "密码必须包含大写字母、小写字母、数字、特殊字符中的三种",
								lettersonly : "Letters only please.",
								letterswithbasicpunc : "Letters or punctuation only please.",
								notEqualTo : "Please enter a different value, values must not be the same.",
								nowhitespace : "Please enter a different value, values must not be the same..",
								time : "Please enter a valid time, between 00:00 and 23:59.",
								time12h : "Please enter a valid time in 12-hour am/pm format."
							});
			if (a("Language") == "zh_CN") {
				b
						.extend(
								b.validator.messages,
								{
									pattern : "\u65e0\u6548\u7684\u683c\u5f0f.",
									maxWords : b.validator
											.format("\u8bf7\u8f93\u5165\u957f\u5ea6\u4e0d\u5927\u4e8e  {0} \u4e2a\u5355\u8bcd."),
									minWords : b.validator
											.format("\u8bf7\u8f93\u5165\u81f3\u5c11  {0} \u4e2a\u5355\u8bcd."),
									rangeWords : b.validator
											.format("\u8bf7\u8f93\u5165\u957f\u5ea6\u5728 {0} \u5230 {1} \u4e4b\u95f4\u7684\u5355\u8bcd."),
									accept : b.validator
											.format("\u8bf7\u63d0\u4f9b\u4e00\u4e2a\u5305\u542b\u6709\u6548\u7684\u6587\u4ef6\u7c7b\u578b\u7684\u503c."),
									alphanumeric : b.validator
											.format("\u5b57\u6bcd\uff0c\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u3002"),
									bankaccountNL : b.validator
											.format("\u8bf7\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u7684\u94f6\u884c\u5e10\u6237\u53f7\u7801\u3002"),
									bankorgiroaccountNL : b.validator
											.format("\u8bf7\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u7684\u94f6\u884c\u6216\u8f6c\u8d26\u8d26\u53f7\u3002"),
									bic : "\u8bf7\u6307\u5b9a\u4e00\u4e2a\u6709\u6548\u7684BIC\u4ee3\u7801.",
									extension : b.validator
											.format("\u8bf7\u8f93\u5165\u4e00\u4e2a\u6709\u6548\u7684\u6269\u5c55\u540d."),
									integer : "\u4e00\u4e2a\u6b63\u7684\u6216\u8d1f\u7684\u975e\u5341\u8fdb\u5236\u6570.",
									ipv4 : "\u8bf7\u8f93\u5165\u4e00\u4e2a\u6709\u6548\u7684IP v4\u5730\u5740.",
									ipv6 : "\u8bf7\u8f93\u5165\u4e00\u4e2a\u6709\u6548\u7684IP v6\u5730\u5740.",
									lettersonly : "\u53ea\u63a5\u53d7\u5b57\u6bcd.",
									letterswithbasicpunc : "\u8bf7\u53ea\u4f7f\u7528\u5b57\u6bcd\u6216\u6807\u70b9\u7b26\u53f7.",
									notEqualTo : "\u8bf7\u8f93\u5165\u4e00\u4e2a\u4e0d\u540c\u7684\u503c\uff0c\u503c\u5fc5\u987b\u4e0d\u4e00\u6837.",
									nowhitespace : "\u4e0d\u63a5\u53d7\u7a7a\u767d\u5b57\u7b26.",
									time : "\u8bf7\u8f93\u5165\u4e00\u4e2a\u6709\u6548\u7684\u65f6\u95f4\uff0c00:00\u81f323:59\u4e4b\u95f4.",
									time12h : "\u8bf7\u8f93\u5165\u4e00\u4e2a\u6709\u6548\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\uff1a12 am/pm.",
									safePassword: "密码必须包含大写字母、小写字母、数字、特殊字符中的三种",
								})
			}
			function a(d) {
				var c, e = new RegExp("(^| )" + d + "=([^;]*)(;|$)");
				if (c = document.cookie.match(e)) {
					return unescape(c[2])
				}
				return null
			}
			(function() {
				function c(d) {
					return d.replace(/<.[^<>]*?>/g, " ").replace(
							/&nbsp;|&#160;/gi, " ").replace(
							/[.(),;:!?%#$'\"_+=\/\-\u201c\u201d\u2019]*/g, "")
				}
				b.validator.addMethod("maxWords", function(e, d, f) {
					return this.optional(d)
							|| c(e).match(/\b\w+\b/g).length <= f
				}, b.validator.messages.maxWords);
				b.validator.addMethod("minWords", function(e, d, f) {
					return this.optional(d)
							|| c(e).match(/\b\w+\b/g).length >= f
				}, b.validator.messages.minWords);
				b.validator.addMethod("rangeWords", function(g, d, h) {
					var f = c(g), e = /\b\w+\b/g;
					return this.optional(d) || f.match(e).length >= h[0]
							&& f.match(e).length <= h[1]
				}, b.validator.messages.rangeWords)
			}());
			b.validator.addMethod("accept", function(h, e, k) {
				var j = typeof k === "string" ? k.replace(/\s/g, "")
						: "image/*", g = this.optional(e), d, c, f;
				if (g) {
					return g
				}
				if (b(e).attr("type") === "file") {
					j = j.replace(/[\-\[\]\/\{\}\(\)\+\?\.\\\^\$\|]/g, "\\$&")
							.replace(/,/g, "|").replace("/*", "/.*");
					if (e.files && e.files.length) {
						f = new RegExp(".?(" + j + ")$", "i");
						for (d = 0; d < e.files.length; d++) {
							c = e.files[d];
							if (!c.type.match(f)) {
								return false
							}
						}
					}
				}
				return true
			}, b.validator.messages.accept);
			b.validator.addMethod("alphanumeric", function(d, c) {
				return this.optional(c) || /^\w+$/i.test(d)
			}, b.validator.messages.alphanumeric);
			b.validator.addMethod("bankaccountNL", function(h, e) {
				if (this.optional(e)) {
					return true
				}
				if (!(/^[0-9]{9}|([0-9]{2} ){3}[0-9]{3}$/.test(h))) {
					return false
				}
				var g = h.replace(/ /g, ""), f = 0, c = g.length, j, d, i;
				for (j = 0; j < c; j++) {
					d = c - j;
					i = g.substring(j, j + 1);
					f = f + d * i
				}
				return f % 11 === 0
			}, b.validator.messages.bankaccountNL);
			b.validator.addMethod("bankorgiroaccountNL", function(d, c) {
				return this.optional(c)
						|| (b.validator.methods.bankaccountNL.call(this, d, c))
						|| (b.validator.methods.giroaccountNL.call(this, d, c))
			}, b.validator.messages.bankorgiroaccountNL);
			b.validator
					.addMethod(
							"bic",
							function(d, c) {
								return this.optional(c)
										|| /^([A-Z]{6}[A-Z2-9][A-NP-Z1-9])(X{3}|[A-WY-Z0-9][A-Z0-9]{2})?$/
												.test(d.toUpperCase())
							}, b.validator.messages.bic);
			b.validator
					.addMethod(
							"dateFA",
							function(d, c) {
								return this.optional(c)
										|| /^[1-4]\d{3}\/((0?[1-6]\/((3[0-1])|([1-2][0-9])|(0?[1-9])))|((1[0-2]|(0?[7-9]))\/(30|([1-2][0-9])|(0?[1-9]))))$/
												.test(d)
							}, b.validator.messages.dateFA);
			b.validator.addMethod("dateITA", function(g, e) {
				var c = false, i = /^\d{1,2}\/\d{1,2}\/\d{4}$/, k, f, d, h, j;
				if (i.test(g)) {
					k = g.split("/");
					f = parseInt(k[0], 10);
					d = parseInt(k[1], 10);
					h = parseInt(k[2], 10);
					j = new Date(Date.UTC(h, d - 1, f, 12, 0, 0, 0));
					if ((j.getUTCFullYear() === h)
							&& (j.getUTCMonth() === d - 1)
							&& (j.getUTCDate() === f)) {
						c = true
					} else {
						c = false
					}
				} else {
					c = false
				}
				return this.optional(e) || c
			}, b.validator.messages.dateITA);
			b.validator
					.addMethod(
							"dateNL",
							function(d, c) {
								return this.optional(c)
										|| /^(0?[1-9]|[12]\d|3[01])[\.\/\-](0?[1-9]|1[012])[\.\/\-]([12]\d)?(\d\d)$/
												.test(d)
							}, b.validator.messages.dateNL);
			b.validator.addMethod("extension", function(d, c, e) {
				e = typeof e === "string" ? e.replace(/,/g, "|")
						: "png|jpe?g|gif";
				return this.optional(c)
						|| d.match(new RegExp("\\.(" + e + ")$", "i"))
			}, b.validator.messages.extension);
			b.validator.addMethod("integer", function(d, c) {
				return this.optional(c) || /^-?\d+$/.test(d)
			}, b.validator.messages.integer);
			b.validator
					.addMethod(
							"ipv4",
							function(d, c) {
								return this.optional(c)
										|| /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i
												.test(d)
							}, b.validator.messages.ipv4);
			b.validator
					.addMethod(
							"ipv6",
							function(d, c) {
								return this.optional(c)
										|| /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i
												.test(d)
							}, b.validator.messages.ipv6);
			b.validator.addMethod("lettersonly", function(d, c) {
				return this.optional(c) || /^[a-z]+$/i.test(d)
			}, b.validator.messages.lettersonly);
			b.validator.addMethod("letterswithbasicpunc", function(d, c) {
				return this.optional(c) || /^[a-z\-.,()'"\s]+$/i.test(d)
			}, b.validator.messages.letterswithbasicpunc);
			jQuery.validator.addMethod("notEqualTo", function(d, c, e) {
				return this.optional(c)
						|| !b.validator.methods.equalTo.call(this, d, c, e)
			}, b.validator.messages.notEqualTo);
			b.validator.addMethod("nowhitespace", function(d, c) {
				return this.optional(c) || /^\S+$/i.test(d)
			}, b.validator.messages.nowhitespace);
			b.validator.addMethod("pattern", function(d, c, e) {
				if (this.optional(c)) {
					return true
				}
				if (typeof e === "string") {
					e = new RegExp("^(?:" + e + ")$")
				}
				return e.test(d)
			}, b.validator.messages.pattern);
			b.validator.addMethod("time", function(d, c) {
				return this.optional(c)
						|| /^([01]\d|2[0-3]|[0-9])(:[0-5]\d){1,2}$/.test(d)
			}, b.validator.messages.time);
			// �ַ���֤��ֻ�ܰ����ġ�Ӣ�ġ����ֵ��ַ�    
		    b.validator.addMethod("stringCheck", function(d, c) {       
		         return this.optional(c) || /^[a-zA-Z0-9\u4e00-\u9fa5]+$/i.test(d)       
		    }, b.validator.messages.stringCheck); 
		    //只包含中英文字符
		    b.validator.addMethod("nameCheck", function(d, c) {       
		         return this.optional(c) || /^[a-zA-Z\u4e00-\u9fa5]+$/i.test(d)       
		    }, b.validator.messages.nameCheck);
		    //手机号码验证
		    b.validator.addMethod("phoneCheck", function(d, c) {       
		         return this.optional(c) || /^1[34578]\d{9}$/i.test(d)       
		    }, b.validator.messages.phoneCheck);
		    //动态范围,传入控件对象，value以'-'或者','逗号分隔
		    b.validator.addMethod("dynamicRange", function(d, c, e) {
		    	return $(e).val().indexOf(",")==-1?this.optional(c) || d>=parseFloat($(e).val().split("-")[0])&&d<=parseFloat($(e).val().split("-")[1]):this.optional(c) || d>=parseFloat($(e).val().split(",")[0])&&d<=parseFloat($(e).val().split(",")[1]);
			}, b.validator.messages.dynamicRange);
		    // �ַ���֤��ֻ�ܰ�Ӣ�ġ����ֵ��ַ�    
		    b.validator.addMethod("codeCheck", function(d, c) {       
		         return this.optional(c) || /^[^\u4e00-\u9fa5 ]+$/i.test(d)       
		    }, b.validator.messages.codeCheck);
		    b.validator.addMethod("safePassword", function(d, c){
		         var testValue1 = /^.*[A-Z]+.*$/.test(d) ? 1:0;
		         var testValue2 = /^.*[a-z]+.*$/.test(d) ? 1:0;
		         var testValue3 = /^.*[0-9]+.*$/.test(d) ? 1:0;
		         var testValue4 = /^.*[^\w]+.*$/.test(d) ? 1:0;
		         var value = testValue1 + testValue2 + testValue3 + testValue4;
		         return value >= 3;
		    }, b.validator.messages.safePassword);
			b.validator.addMethod("time12h", function(d, c) {
				return this.optional(c)
						|| /^((0?[1-9]|1[012])(:[0-5]\d){1,2}(\ ?[AP]M))$/i
								.test(d)
			}, b.validator.messages.time12h)
		}));
